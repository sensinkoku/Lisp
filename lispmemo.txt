lispメモ
スライドに書いていないこと多いので注意

大文字小文字区別しないなど
NUMBERP
SYMBOLP
Pはpredictで正しいなら　Tを返す
間違っているならNILを返す
リストの内部構造は
（２　３　５）
なら
（２　｜　次のアドレス）（３｜次のアドレス）
シンボルテーブル
最後の要素５の次はNILで終了を表している
リスト自体には２に指し示されている

＿＿＿＿＿＿＿＿＿＿＿＿＿＿
重要な予約語
リストについて
first second third last length rest
数と記号tとnilはそれ自身が記号となるが
文字列とかは`アポロストロフィ　引用符をつける 数字７のキーのシフト
引用符をついたものを評価すると引用符がつかないものになる
条件分岐
if
(if 条件　真の時の値　偽の時の値)
cond condition
(cond (条件１　結果１)
      (条件2 結果2)
      )
その他としての条件に(t 結果)とすることがよくある
and nilになった時点で評価をとめてnil返す
or　nil以外とったときにその値を返す

car cdrc
car=first cdr=rest
carは今のリストの要素を取り出せる
cdrは今の要素につながるものたちを取り出せる
(cdr '(1 2 3 4))
=>(2 3 4)

リスト構造として値の部分と次の要素はこちらですよという部分がある
(2 3)は以下を表す
(2 | →) (3 | nil)
cdr, carは最初の要素に適用されるのでcarで最初のもの cdrで最初以外が取ってこられる


(member)
このリストにこの要素が入っているか
(member ')

・ちょっと変わった再起
リストのトップレベルでなく内部の要素をも操作する
各要素はアトムかconsセルになる
＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
関数適用
#’で関数を引数で扱う
(mapcar #’square ‘(2 3 4))
mapcarはリストの要素数を保つ　それぞれの要素に関数適用してリスト返す
(mapcar #’+ ‘(1 2 3) ’(10 20 30))
=>(11 22 33)
find-if　リストに適用して最初に真となった要素を返す
remove-if　各リストに述語を適用し、真となった要素を除いたリストを返す
remove-if-not

____________________
起動方法
gclで起動
(load "test.lsp")でプログラムをロードできる
講義ページの実行環境についてに書いてある
リストを二分木とみなす

__________________
コードにおとすまえに再起の構造が分かれば
あとはコードに直すだけ
____________________
11/24
lispの書き方　ファイル実行の方法復習
内部的にconsセルの二分木だと考えるとわかるとか？
______________\
12/2メモ
関数適用　この授業ではシャープコードを使うようにする
find-ifは最初の成立しているもののみを返す
関数適用に置いて二つの引数リストが渡される場合
リストの一番目と一番目　二番めと二番目を比較していく

reduce　順次というのは
リストについて一番目と二番目について演算　次に二番めと三番目について演算
もし引数のリストが一つしかない時は特例として扱われる
reduce #'append((1 2)(3 4)(5 6))については
(1 2 3 4)(5 6)となってからこれを合わせる
(1 2 3 4 5 6)
イコールは数字なら＝使えるけれど
文字ならeq eql equalのどれかを使う

つみきのプリント
問題１
'?を入れないといけない
condとかで tを書くときに(t)としてはいけない
tは関数ではないので　素でtと書かなくてはいけない
______________\
12/16
改行 ~% ~&
~&は改行を既にしていたらこれ以上しない
1/7
局所変数の説明sumが局所変数になっている
diff, proportion, percentageも局所変数
-----------------------
1/13





